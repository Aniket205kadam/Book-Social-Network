name: BSN Backend API Pipeline

on:
  push:
    branches:
      - ci/pipeline
    paths:
      - book-network/**
      - docker/backend/Dockerfile
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml
jobs:
  compile:
    runs-on: ubuntu
    name: Compile Project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 21
          distribution: "corretto"

      - name: Compile project
        run: |
          cd book-network
          ./mvnw clean compile
  
  unit-tests:
    runs-on: ubuntu
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 21
          distribution: "corretto"

      - name: Running Unit Tests
        run: |
          cd book-network
          ./mvnw clean test

  build:
    runs-on: ubuntu
    name: Build Backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-jdk@v4
        with:
          java-version: 21
          distribution: "corretto"

      - name: Build project
        run: |
          cd book-network
          ./mvnw clean package
    
    build-image:
      runs-on: ubuntu
      name: Build Docker Image
      needs: [build]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Setup JDK
          uses: actions/setup-jdk@v4
          with:
            java-version: 21
            distribution: "corretto"

        - name: Build project
          run: |
            cd book-network
            ./mvnw clean package

        - name: Extract Project Version
          id: extract_version
          run: |
            cd book-network
            echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build & Push to DockerHub
          uses: docker/build-push-action@v5
          with:
            context: book-network # .
            file: docker/backend/Dockerfile
            push: true
            platforms: linux/amd64
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}, ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
            build-args:
              PROFILE=dev
              APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

    deploy:
      name: Deploy Backend
      runs-on: ubuntu
      needs: [build-image]
      steps:
        - name: Create deployment Folder
          env:
            RENDER_API_KEY ${{ secrets.RENDER_API_KEY }
          run: |
            curl -X POST https://api.render.com/v1/services/{service-id}/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "docker": {
               "image": "${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}"
              },
            "env": [
              {
                "key": "DATABASE_TYPE",
                "value": "${{ secrets.DATABASE_TYPE }}"
              },
              {
                "key": "DATABASE_HOST",
                "value": "${{ secrets.DATABASE_HOST }}"
              },
              {
                "key": "DATABASE_PORT",
                "value": ${{ secrets.DATABASE_PORT }}
              },
              {
                "key": "DATABASE_NAME",
                "value": ${{ secrets.DATABASE_NAME }}
              },
              {
                "key": "DATABASE_USERNAME",
                "value": ${{ secrets.DATABASE_USERNAME }}
              },
              {
                "key": "DATABASE_PASSWORD",
                "value": ${{ secrets.DATABASE_PASSWORD }}
              },
              {
                "key": "DATABASE_DRIVER",
                "value": ${{ secrets.DATABASE_DRIVER }}
              },
              {
                "key": "DATABASE_DIALECT",
                "value": ${{ secrets.DATABASE_DIALECT }}
              },
              {
                "key": "MAIL_USERNAME",
                "value": ${{ secrets.MAIL_USERNAME }}
              },
              {
                "key": "MAIL_PASSWORD",
                "value": ${{ secrets.MAIL_PASSWORD }}
              },
              {
                "key": "APP_SECRET_KEY",
                "value": ${{ secrets.APP_SECRET_KEY }}
              },
              {
                "key": "APP_ACCOUNT_ACTIVATE_URL",
                "value": ${{ secrets.APP_ACCOUNT_ACTIVATE_URL }}
              },
              {
                "key": "APP_FILE_UPLOAD_URL",
                "value": ${{ secrets.APP_FILE_UPLOAD_URL }}
              },
              {
                "key": "APP_FRONTEND_URL_LOCAL",
                "value": ${{ secrets.APP_FRONTEND_URL_LOCAL }}
              },
              {
                "key": "APP_FRONTEND_URL_PROD",
                "value": ${{ secrets.APP_FRONTEND_URL_PROD }}
              }
            ]
            }'